awaySidelinedHtml = b1[(sidelinedHeaderIndex[1]+1):(sidelinedHeaderIndex[2]-1)]
homeSidelinedHtml = b1[(sidelinedHeaderIndex[2]+1):(matchOfficialHeaderIndex-1)]
}
homeSidelinedDF = ExtractSidelinedInfo(homeSidelinedHtml, TRUE)
awaySidelinedDF = ExtractSidelinedInfo(awaySidelinedHtml, FALSE)
sidelinedDF = bind_rows(homeSidelinedDF, awaySidelinedDF)
}
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDF
appearanceDFUniqued = appearanceDF %>%
group_by(playerid, player, homeStatus, endTime) %>%
mutate(numOccur = n())
appearanceDFUniqued
appearanceDFUniqued = appearanceDF %>%
group_by(playerid, player, homeStatus) %>%
mutate(numOccur = n())
appearanceDFUniqued
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
duplicatedIndex = which(appearanceDFUniqued$numOccur > 1)
duplicatedIndex
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
shortDupIndex = which(appearanceDFUniqued$numOccur > 1)
shortDupIndex
longDupIndex = which(with(appearanceDF, paste(team, playerid)) == with(appearanceDFUniqued[shortDupIndex,], paste(team, playerid)))
di = 1
appearanceDFUniqued %>% head()
longDupIndex = which(appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex])
appearanceDFUniqued$playerid[shortDupIndex]
longDupIndex = which(appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]])
longDupIndex
appearanceDF[longDupIndex,]
appearanceDF$startTime[longDupIndex]
!grepl('[^0-9]',appearanceDF$startTime[longDupIndex])
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
shortDupIndex = which(appearanceDFUniqued$numOccur > 1)
longDupIndex = which(appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]])
any(appearanceDF$isNumeric[longDupIndex])
appearanceDF[longDupIndex]
appearanceDF[longDupIndex,]
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
RemoveDoubleListedPlayer = function(appearanceDF) {
appearanceDFUniqued = appearanceDF %>%
group_by(playerid, player, homeStatus) %>%
mutate(numOccur = n())
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDF$toKeep = TRUE
appearanceDF$isCurrent = FALSE
shortDupIndex = which(appearanceDFUniqued$numOccur > 1)
if (length(shortDupIndex) > 1) {
for (di in 1:length(shortDupIndex)) {
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
if (any(appearanceDF$isNumeric[longDupIndex])) {
# the one in which they player you keepo, the other you ditch
appearanceDF$toKeep[which(appearanceDF$isCurrent & !appearanceDF$isNumeric)] = FALSE
}
if (!any(appearanceDF$isNumeric)) {
# paste the reasons together and ditch the second one
appearanceDF$toKeep[which(appearanceDF$isCurrent)[-1]] = FALSE
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(appearanceDF$startTime[isCurrent]), collapse = '/')
}
}
}
appearanceDF = appearanceDF %>%
filter(toKeep) %>%
select(-c(isNumeric, toKeep, isCurrent))
return(appearanceDF)
}
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDF %>% arrange(player)
appearanceDF = RemoveDoubleListedPlayer(appearanceDF)
appearanceDF %>% arrange(player)
dateToDo = 20180818
appearanceDF = getappearanceinfofordate(dateToDo[di])
webadd = 'http://uk.soccerway.com/matches/2018/08/18/england/premier-league/everton-football-club/southampton-fc/2795284/?ICID=HP_MS_01_02'
mykey = '20180818everton'
filen=paste(DATAPATH,'soccerwayhtml/',mykey,'.html',sep='')
if (!file.exists(filen)) {
b1=scanrobust(webadd,'',sep='\n',quiet=T,encoding='UTF-8')
write(file=filen,b1)
}
b1=scan(filen,'',sep='\n',quiet=T,encoding='latin1')
b1=iconv(b1,from='latin1',to='ASCII//TRANSLIT')
b1=tolower(b1)
dum = b1[grep('team-logo',b1)]
soccerwayHomeTeam = ExtractSoccerwayTeam(dum[1])
soccerwayAwayTeam = ExtractSoccerwayTeam(dum[2])
### right, we have a problem with player links changing to coach links - need to override when this happens
coachIndex=grep('/coaches/',b1)
probsax=coachIndex[!grepl('coach:',b1[coachIndex-1])]
if (length(probsax)>0) {
b1[probsax]=gsub('/coaches/','/players/',b1[probsax])
### also record it where it happens
probplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',b1[probsax])
probplayerid=gsub('(^.+players/[^/]+.)([0-9]+)(/.+$)','\\2',b1[probsax])
probpaste=paste(probplayerid,probplayer,sep='~')
coachproblem(probpaste)
}
linb=b1[(grep('header-label.+lineups',b1)+1):(grep('substitutes',b1)-1)]
teamb=grep('a href="/teams',linb)
startline=grep('<a href="/players/.+/[0-9]',linb)
### occasioanlly that picks up a coach, get rid of them
dum=grep('coach:',linb[startline-1])
if (length(dum)>0) startline=startline[-dum]
startplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',linb[startline])
startplayer = CleanPlayer(startplayer)
startplayerid=gsub('(^.+players/[^/]+/)([0-9]+)(/.+$)','\\2',linb[startline])
startplayerhastatus=rep(1:2,rep(11,2))
subb=b1[(grep('substitutes',b1)+1):(grep('additional info',b1)[1]-1)]
startline=grep('<a href="/players/.+/[0-9]',subb)
### but separate into those who were subs to start with, and those who were subbed off
substatus=rep(3,length(startline))
substatus[grep('substituted',subb[startline+1])]=1
substatus[grep('substitute substitute-out',subb[startline])]=2
subtime=rep(NA,length(startline))
subtime[substatus==1]=gsub("(^.+> )([0-9\\+]+)('</p>)","\\2",subb[startline[substatus==2]])
subtime[substatus==2]=gsub("(^.+> )([0-9\\+]+)('</p>)","\\2",subb[startline[substatus==2]])
subplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',subb[startline])
subplayer = CleanPlayer(subplayer)
subplayerid=gsub('(^.+players/[^/]+/)([0-9]+)(/.+$)','\\2',subb[startline])
subplayerhastatus=rep(NA,length(subplayer))
# but which side did they play for? this should be right hopefully
dum=grep('<div class=\"container right\">',subb)
subplayerhastatus[startline<dum]=1
subplayerhastatus[startline>dum]=2
## however, we don't want the doubling up of players, so let's convert things to minute on and minute off
unplayerid = unique(c(startplayerid, subplayerid))
unplayer=c(startplayer,subplayer)[match(unplayerid, c(startplayerid, subplayerid))]
startix=which(unplayerid %in% startplayerid)
mstart=match(unplayerid[startix],startplayerid)
subonix=which(unplayerid %in% subplayerid[substatus==1] & !unplayerid %in% subplayerid[substatus==2])
msubon=match(unplayerid[subonix],subplayerid)
suboffix=which(unplayerid %in% subplayerid[substatus==2])
msuboff=match(unplayerid[suboffix],subplayerid)
subonoffix=which(unplayerid %in% subplayerid[substatus==1] & unplayerid %in% subplayerid[substatus==2])
msubonoffon=which(substatus==1)[match(unplayerid[subonoffix],subplayerid[substatus==1])]
msubonoffoff=which(substatus==2)[match(unplayerid[subonoffix],subplayerid[substatus==2])]
starttime=endtime=hastatus=rep('U',length(unplayerid))
starttime[startix]=0
starttime[subonix]=subtime[msubon]
endtime[subonix]=94
endtime[which(unplayerid %in% startplayerid & !unplayerid %in% subplayerid)]=94
endtime[suboffix]=subtime[msuboff]
starttime[subonoffix]=subtime[msubonoffon]
endtime[subonoffix]=subtime[msubonoffoff]
starttime = CleanPlusMinute(starttime)
endtime = CleanPlusMinute(endtime)
hastatus=c(startplayerhastatus,subplayerhastatus)[match(unplayerid,c(startplayerid,subplayerid))]
homeStatus = hastatus == 1
playingDF = tibble(playerid = unplayerid,
player = unplayer,
homeStatus = homeStatus,
startTime = starttime,
endTime = endtime)
sidelinedHeaderIndex = grep('sidelined table (right|left)', b1)
matchOfficialHeaderIndex = grep('match officials', b1)
if (length(sidelinedHeaderIndex) == 0) {
message('Getting no sidelined info for this, might be worth checking:')
sidelinedDF = tibble(player = character(0),
injurySuspension = character(0),
homeStatus = logical(0))
}
if (length(sidelinedHeaderIndex) == 1) {
# which team has sidelined data?
sidelinedHtml = b1[(sidelinedHeaderIndex+1):(matchOfficialHeaderIndex-1)]
sidelinedTeamHtml = sidelinedHtml[grep('<a href=\"/teams/',sidelinedHtml)]
sidelinedTeam = ExtractSoccerwayTeam(sidelinedTeamHtml)
if (sidelinedTeam == soccerwayHomeTeam) homeStatus = TRUE
if (sidelinedTeam == soccerwayAwayTeam) homeStatus = FALSE
if (!sidelinedTeam %in% c(soccerwayHomeTeam, soccerwayAwayTeam)) {
stop('can not find which team sidelined players play for, check\n')
}
sidelinedDF = ExtractSidelinedInfo(sidelinedHtml, homeStatus)
}
if (length(sidelinedHeaderIndex) == 2) {
# have to find out what order they've been listed firstly
homeAwaySidelined = ExtractSoccerwayTeam(b1[sidelinedHeaderIndex+4])
if (homeAwaySidelined[1] == soccerwayHomeTeam & homeAwaySidelined[2] == soccerwayAwayTeam) {
homeSidelinedHtml = b1[(sidelinedHeaderIndex[1]+1):(sidelinedHeaderIndex[2]-1)]
awaySidelinedHtml = b1[(sidelinedHeaderIndex[2]+1):(matchOfficialHeaderIndex-1)]
}
if (homeAwaySidelined[1] == soccerwayAwayTeam & homeAwaySidelined[2] == soccerwayHomeTeam) {
awaySidelinedHtml = b1[(sidelinedHeaderIndex[1]+1):(sidelinedHeaderIndex[2]-1)]
homeSidelinedHtml = b1[(sidelinedHeaderIndex[2]+1):(matchOfficialHeaderIndex-1)]
}
homeSidelinedDF = ExtractSidelinedInfo(homeSidelinedHtml, TRUE)
awaySidelinedDF = ExtractSidelinedInfo(awaySidelinedHtml, FALSE)
sidelinedDF = bind_rows(homeSidelinedDF, awaySidelinedDF)
}
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDF %>% arrange(player)
appearanceDF = RemoveDoubleListedPlayer(appearanceDF)
appearanceDF
appearanceDF %>% arrange(player)
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDFUniqued = appearanceDF %>%
group_by(playerid, player, homeStatus) %>%
mutate(numOccur = n())
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDF$toKeep = TRUE
appearanceDF$isCurrent = FALSE
shortDupIndex = which(appearanceDFUniqued$numOccur > 1)
shortDupIndex
appearanceDFUniqued = appearanceDF %>%
count(playerid, player, homeStatus) %>%
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDFUniqued = appearanceDF %>%
count(playerid, player, homeStatus)
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDF$toKeep = TRUE
appearanceDF$isCurrent = FALSE
shortDupIndex = which(appearanceDFUniqued$n > 1)
shortDupIndex
if (length(shortDupIndex) > 1) {
for (di in 1:length(shortDupIndex)) {
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
if (any(appearanceDF$isNumeric[longDupIndex])) {
# the one in which they player you keepo, the other you ditch
appearanceDF$toKeep[which(appearanceDF$isCurrent & !appearanceDF$isNumeric)] = FALSE
}
if (!any(appearanceDF$isNumeric)) {
# paste the reasons together and ditch the second one
appearanceDF$toKeep[which(appearanceDF$isCurrent)[-1]] = FALSE
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(appearanceDF$startTime[isCurrent]), collapse = '/')
}
}
}
appearanceDF = appearanceDF %>%
filter(toKeep) %>%
select(-c(isNumeric, toKeep, isCurrent))
appearanceDF
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDFUniqued = appearanceDF %>%
count(playerid, player, homeStatus)
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDF$toKeep = TRUE
appearanceDF$isCurrent = FALSE
shortDupIndex = which(appearanceDFUniqued$n > 1)
shortDupIndex
di = 1
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
appearanceDF %>% filter(isCurrent)
any(appearanceDF$isNumeric[longDupIndex])
any(with(appearanceDF, isNumeric[isCurrent]))
!any(with(appearanceDF, isNumeric[isCurrent]))
# paste the reasons together and ditch the second one
appearanceDF$toKeep[which(appearanceDF$isCurrent)[-1]] = FALSE
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(appearanceDF$startTime[isCurrent]), collapse = '/')
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(with(appearanceDF, startTime[isCurrent])), collapse = '/')
appearanceDF
### let's have a separate file to do the data update
source('c:/research/lineup/ff_startup.r')
seasoninfo = read.csv(paste(DATAPATH,'seasoninfo.csv',sep=''))
currentseason = 1920
source(paste0(USERPATH, 'data fetching/soccerway-funct.r'))
resultdf = ffDataLoading:::GetResultDF()
dateToDo = 20180818
di=1
appearanceDF = getappearanceinfofordate(dateToDo[di])
webadd = 'http://uk.soccerway.com/matches/2018/08/18/england/premier-league/everton-football-club/southampton-fc/2795284/?ICID=HP_MS_01_02'
mykey = '20180818everton'
### firstly check to see if we've already got the filename
message('webadd = \'', webadd, '\'')
message('mykey = \'', mykey, '\'')
filen=paste(DATAPATH,'soccerwayhtml/',mykey,'.html',sep='')
if (!file.exists(filen)) {
b1=scanrobust(webadd,'',sep='\n',quiet=T,encoding='UTF-8')
write(file=filen,b1)
}
b1=scan(filen,'',sep='\n',quiet=T,encoding='latin1')
b1=iconv(b1,from='latin1',to='ASCII//TRANSLIT')
b1=tolower(b1)
dum = b1[grep('team-logo',b1)]
soccerwayHomeTeam = ExtractSoccerwayTeam(dum[1])
soccerwayAwayTeam = ExtractSoccerwayTeam(dum[2])
### right, we have a problem with player links changing to coach links - need to override when this happens
coachIndex=grep('/coaches/',b1)
probsax=coachIndex[!grepl('coach:',b1[coachIndex-1])]
if (length(probsax)>0) {
b1[probsax]=gsub('/coaches/','/players/',b1[probsax])
### also record it where it happens
probplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',b1[probsax])
probplayerid=gsub('(^.+players/[^/]+.)([0-9]+)(/.+$)','\\2',b1[probsax])
probpaste=paste(probplayerid,probplayer,sep='~')
coachproblem(probpaste)
}
linb=b1[(grep('header-label.+lineups',b1)+1):(grep('substitutes',b1)-1)]
teamb=grep('a href="/teams',linb)
startline=grep('<a href="/players/.+/[0-9]',linb)
### occasioanlly that picks up a coach, get rid of them
dum=grep('coach:',linb[startline-1])
if (length(dum)>0) startline=startline[-dum]
startplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',linb[startline])
startplayer = CleanPlayer(startplayer)
startplayerid=gsub('(^.+players/[^/]+/)([0-9]+)(/.+$)','\\2',linb[startline])
startplayerhastatus=rep(1:2,rep(11,2))
subb=b1[(grep('substitutes',b1)+1):(grep('additional info',b1)[1]-1)]
startline=grep('<a href="/players/.+/[0-9]',subb)
### but separate into those who were subs to start with, and those who were subbed off
substatus=rep(3,length(startline))
substatus[grep('substituted',subb[startline+1])]=1
substatus[grep('substitute substitute-out',subb[startline])]=2
subtime=rep(NA,length(startline))
subtime[substatus==1]=gsub("(^.+> )([0-9\\+]+)('</p>)","\\2",subb[startline[substatus==2]])
subtime[substatus==2]=gsub("(^.+> )([0-9\\+]+)('</p>)","\\2",subb[startline[substatus==2]])
subplayer=gsub('(^.+players/)([^/]+)(/.+$)','\\2',subb[startline])
subplayer = CleanPlayer(subplayer)
subplayerid=gsub('(^.+players/[^/]+/)([0-9]+)(/.+$)','\\2',subb[startline])
subplayerhastatus=rep(NA,length(subplayer))
# but which side did they play for? this should be right hopefully
dum=grep('<div class=\"container right\">',subb)
subplayerhastatus[startline<dum]=1
subplayerhastatus[startline>dum]=2
## however, we don't want the doubling up of players, so let's convert things to minute on and minute off
unplayerid = unique(c(startplayerid, subplayerid))
unplayer=c(startplayer,subplayer)[match(unplayerid, c(startplayerid, subplayerid))]
startix=which(unplayerid %in% startplayerid)
mstart=match(unplayerid[startix],startplayerid)
subonix=which(unplayerid %in% subplayerid[substatus==1] & !unplayerid %in% subplayerid[substatus==2])
msubon=match(unplayerid[subonix],subplayerid)
suboffix=which(unplayerid %in% subplayerid[substatus==2])
msuboff=match(unplayerid[suboffix],subplayerid)
subonoffix=which(unplayerid %in% subplayerid[substatus==1] & unplayerid %in% subplayerid[substatus==2])
msubonoffon=which(substatus==1)[match(unplayerid[subonoffix],subplayerid[substatus==1])]
msubonoffoff=which(substatus==2)[match(unplayerid[subonoffix],subplayerid[substatus==2])]
starttime=endtime=hastatus=rep('U',length(unplayerid))
starttime[startix]=0
starttime[subonix]=subtime[msubon]
endtime[subonix]=94
endtime[which(unplayerid %in% startplayerid & !unplayerid %in% subplayerid)]=94
endtime[suboffix]=subtime[msuboff]
starttime[subonoffix]=subtime[msubonoffon]
endtime[subonoffix]=subtime[msubonoffoff]
starttime = CleanPlusMinute(starttime)
endtime = CleanPlusMinute(endtime)
hastatus=c(startplayerhastatus,subplayerhastatus)[match(unplayerid,c(startplayerid,subplayerid))]
homeStatus = hastatus == 1
playingDF = tibble(playerid = unplayerid,
player = unplayer,
homeStatus = homeStatus,
startTime = starttime,
endTime = endtime)
sidelinedHeaderIndex = grep('sidelined table (right|left)', b1)
matchOfficialHeaderIndex = grep('match officials', b1)
if (length(sidelinedHeaderIndex) == 0) {
message('Getting no sidelined info for this, might be worth checking:')
sidelinedDF = tibble(player = character(0),
injurySuspension = character(0),
homeStatus = logical(0))
}
if (length(sidelinedHeaderIndex) == 1) {
# which team has sidelined data?
sidelinedHtml = b1[(sidelinedHeaderIndex+1):(matchOfficialHeaderIndex-1)]
sidelinedTeamHtml = sidelinedHtml[grep('<a href=\"/teams/',sidelinedHtml)]
sidelinedTeam = ExtractSoccerwayTeam(sidelinedTeamHtml)
if (sidelinedTeam == soccerwayHomeTeam) homeStatus = TRUE
if (sidelinedTeam == soccerwayAwayTeam) homeStatus = FALSE
if (!sidelinedTeam %in% c(soccerwayHomeTeam, soccerwayAwayTeam)) {
stop('can not find which team sidelined players play for, check\n')
}
sidelinedDF = ExtractSidelinedInfo(sidelinedHtml, homeStatus)
}
if (length(sidelinedHeaderIndex) == 2) {
# have to find out what order they've been listed firstly
homeAwaySidelined = ExtractSoccerwayTeam(b1[sidelinedHeaderIndex+4])
if (homeAwaySidelined[1] == soccerwayHomeTeam & homeAwaySidelined[2] == soccerwayAwayTeam) {
homeSidelinedHtml = b1[(sidelinedHeaderIndex[1]+1):(sidelinedHeaderIndex[2]-1)]
awaySidelinedHtml = b1[(sidelinedHeaderIndex[2]+1):(matchOfficialHeaderIndex-1)]
}
if (homeAwaySidelined[1] == soccerwayAwayTeam & homeAwaySidelined[2] == soccerwayHomeTeam) {
awaySidelinedHtml = b1[(sidelinedHeaderIndex[1]+1):(sidelinedHeaderIndex[2]-1)]
homeSidelinedHtml = b1[(sidelinedHeaderIndex[2]+1):(matchOfficialHeaderIndex-1)]
}
homeSidelinedDF = ExtractSidelinedInfo(homeSidelinedHtml, TRUE)
awaySidelinedDF = ExtractSidelinedInfo(awaySidelinedHtml, FALSE)
sidelinedDF = bind_rows(homeSidelinedDF, awaySidelinedDF)
}
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDF
appearanceDF = RemoveDoubleListedPlayer(appearanceDF)
appearanceDF
# but now let's merge the playingDF and sidelineDF
appearanceDF = bind_rows(playingDF,
sidelinedDF %>%
rename(startTime = injurySuspension) %>%
mutate(endTime = NA))
appearanceDFUniqued = appearanceDF %>%
count(playerid, player, homeStatus)
# rule: if they've got two non-appearance lines, paste together
# if they've got an appearance line, take that and ignore other one
appearanceDF$isNumeric = !grepl('[^0-9]', appearanceDF$startTime)
appearanceDF$toKeep = TRUE
appearanceDF$isCurrent = FALSE
shortDupIndex = which(appearanceDFUniqued$n > 1)
if (length(shortDupIndex) > 1) {
for (di in 1:length(shortDupIndex)) {
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
if (any(with(appearanceDF, isNumeric[isCurrent]))) {
# the one in which they player you keepo, the other you ditch
appearanceDF$toKeep[which(appearanceDF$isCurrent & !appearanceDF$isNumeric)] = FALSE
}
if (!any(with(appearanceDF, isNumeric[isCurrent]))) {
# paste the reasons together and ditch the second one
appearanceDF$toKeep[which(appearanceDF$isCurrent)[-1]] = FALSE
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(with(appearanceDF, startTime[isCurrent])), collapse = '/')
}
}
}
shortDupIndex = which(appearanceDFUniqued$n > 1)
if (length(shortDupIndex) > 0) {
for (di in 1:length(shortDupIndex)) {
appearanceDF$isCurrent = appearanceDF$playerid == appearanceDFUniqued$playerid[shortDupIndex[di]]
if (any(with(appearanceDF, isNumeric[isCurrent]))) {
# the one in which they player you keepo, the other you ditch
appearanceDF$toKeep[which(appearanceDF$isCurrent & !appearanceDF$isNumeric)] = FALSE
}
if (!any(with(appearanceDF, isNumeric[isCurrent]))) {
# paste the reasons together and ditch the second one
appearanceDF$toKeep[which(appearanceDF$isCurrent)[-1]] = FALSE
appearanceDF$startTime[which(appearanceDF$isCurrent)[1]] = paste(unique(with(appearanceDF, startTime[isCurrent])), collapse = '/')
}
}
}
appearanceDF = appearanceDF %>%
filter(toKeep) %>%
select(-c(isNumeric, toKeep, isCurrent))
appearanceDF
### let's have a separate file to do the data update
source('c:/research/lineup/ff_startup.r')
seasoninfo = read.csv(paste(DATAPATH,'seasoninfo.csv',sep=''))
currentseason = 1920
source(paste0(USERPATH, 'data fetching/soccerway-funct.r'))
resultdf = ffDataLoading:::GetResultDF()
dateToDo = unique(resultDF$date)
dateToDo = unique(resultdf$date)
for (di in 1:length(dateToDo)) {
appearanceDF = getappearanceinfofordate(dateToDo[di])
appearanceFileOut = paste0(DATAPATH, 'soccerway_saved/appearance-info-', dateToDo[di],'.csv')
write.csv(x = appearanceDF, file = appearanceFileOut, row.names = FALSE)
}
undate = unique(resultdf$date)
startTimeRanking = c(as.character(0:94), 'U', 'injury', 'suspension')
myList = NULL
for (di in 1:length(undate)) {
appearanceFileOut = paste0(DATAPATH, 'soccerway_saved/appearance-info-', undate[di],'.csv')
myList[[di]] = read.csv(appearanceFileOut, as.is = TRUE)
myResultDF = resultdf %>%
filter(date == undate[di] & isHome) %>%
mutate(key = paste(date, team, sep = ''))
myList[[di]] = lazy_left_join(myList[[di]], myResultDF, 'key', c('date', 'team', 'oppteam')) %>%
rename(homeTeam = team, awayTeam = oppteam) %>%
mutate(team = ifelse(homeStatus, homeTeam, awayTeam)) %>%
select(date, team, playerid, player, startTime, endTime) %>%
mutate(startTimeOrder = match(startTime, startTimeRanking)) %>%
arrange(date, team, startTimeOrder) %>%
select(-startTimeOrder)
if ( (di %% 10) == 0) {
message('Have processed ', di, ' out of ', length(undate))
}
}
appearanceDF = bind_rows(myList)
# write unique list of players too
appearanceDF %>% nrow
appearanceDF %>% distinct(team, player) %>% nrow
appearanceDF %>% distinct(date, team, player) %>% nrow
appearanceDF %>% count(startTime)
fileOut = paste0(DATAPATH, 'soccerway_saved/appearance.csv')
write.csv(x = appearanceDF, file = fileOut, row.names = FALSE)
fileOut = paste0(DATAPATH, 'soccerway_saved/playerid.csv')
write.csv(x = appearanceDF %>% distinct(playerid, player), file = fileOut, row.names = FALSE)
.F1Startup()
SetUpModel()
dum = f1smoothing::GetSmooth('qr','q','bw',T,30)
dum$smoothDF %>% filter(race == '2019japan')
dum$smoothDF %>% filter(race == '2019japan') %>% arrange(smoothDCoef)
