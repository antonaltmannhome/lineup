source('c:/research/lineup/new-model-startup.r')
### combine the team spreadsheets into one nice dataframe
source('c:/research/general_startup.r')
suppressWarnings(library(dplyr))
suppressWarnings(library(tidyr))
suppressWarnings(library(lubridate))
USERPATH='c:/research/lineup/'
DATAPATH='d:/whoscored_data/'
setwd(USERPATH)
source('admin_funct.r')
options(warn=2, dplyr.print_max = 1e9)
if (FALSE) {
ffDataLoadingPath = paste0(USERPATH, 'ffDataLoading')
# usethis::create_package(ffDataLoadingPath)
devtools::load_all(ffDataLoadingPath)
#devtools::install(ffDataLoadingPath)
}
seasoninfo = read.csv(paste(DATAPATH,'seasoninfo.csv',sep=''))
currentseason = 1920
resultdf = ffDataLoading:::GetResultDF()
fixtdf = ffDataLoading:::GetFixtDF()
resultdf = ffDataLoading:::AlignGameweekAndSeasonWithResultDF(resultdf)
dum = ffDataLoading:::AlignOddsWithResultsAndFixtures(resultdf, fixtdf)
resultdf = dum$resultDF
fixtdf = dum$fixtDF
gbgdf = ffDataLoading::ReadGbgDF()
gbgdf = ffDataLoading::BolsterGbgDF(gbgdf, resultdf)
gbgdf$played = with(gbgdf, !startTime %in% c('injury', 'suspension', 'U', 'UU'))
gbgdf$minute = 0
gbgdf$minute[gbgdf$played] = with(gbgdf, as.numeric(endTime[played]) - as.numeric(startTime[played]))
ffDataLoadingPath = paste0(USERPATH, 'ffDataLoading')
devtools::install(ffDataLoadingPath)
source('c:/research/lineup/new-model-startup.r')
source(paste0(USERPATH, 'team_funct.r'))
source(paste0(USERPATH, 'player_funct.r'))
playerDF = ffModel:::CalculateUpToDatePlayerSmooth(gbgdf)
fixtdf = getfixturegoal(resultdf, fixtdf)
gbgdf = processdeserved(gbgdf)
summarydf=processdeserved(summarydf)
playerDF = ffModel:::CalculateLatestGoalAssistRate(playerDF, gbgdf, summarydf, resultDF)
gbgdf %>% nrow()
gbgdf %>% distinct(team, player, date) %>% nrow()
gbgdf = gbgdf %>%
group_by(team, player) %>%
arrange(seasonNumber, teamgamenumber) %>%
mutate(gameForTeamNumber = 1:n()) %>%
ungroup()
quantityChoiceVector = c('probStart', 'probOffBench', 'eMinStart', 'eMinBench')
for (qi in 1:length(quantityChoiceVector)) {
optThetaFile = system.file(paste0('opt-theta-', quantityChoiceVector[qi], '.dat'), package = 'ffModel')
theta = scan(optThetaFile, quiet = TRUE)
gbgdfPlusQuantity = CalculateHistoricSingleQuantity(theta, quantityChoice = quantityChoiceVector[qi], gbgdf)
gbgdf = lazy_left_join(gbgdf,
gbgdfPlusQuantity,
c('seasonNumber', 'team', 'player', 'teamgamenumber'),
quantityChoiceVector[qi])
}
devtools::load_all("C:/research/lineup/ffModel")
quantityChoiceVector = c('probStart', 'probOffBench', 'eMinStart', 'eMinBench')
for (qi in 1:length(quantityChoiceVector)) {
optThetaFile = system.file(paste0('opt-theta-', quantityChoiceVector[qi], '.dat'), package = 'ffModel')
theta = scan(optThetaFile, quiet = TRUE)
gbgdfPlusQuantity = CalculateHistoricSingleQuantity(theta, quantityChoice = quantityChoiceVector[qi], gbgdf)
gbgdf = lazy_left_join(gbgdf,
gbgdfPlusQuantity,
c('seasonNumber', 'team', 'player', 'teamgamenumber'),
quantityChoiceVector[qi])
}
gbgdf %>% qview()
ffPath = c(paste0(USERPATH, 'ffDataLoading'),
paste0(USERPATH, 'ffDataJoining'),
paste0(USERPATH, 'ffModel'))
for (fi in 1:length(ffPath)) {
# usethis::create_package(ffPath[fi])
devtools::install(ffPath[fi])
unloadNamespace(ffPath[fi])
}
source('c:/research/lineup/new-model-startup.r')
source(paste0(USERPATH, 'team_funct.r'))
source(paste0(USERPATH, 'player_funct.r'))
playerDF = ffModel:::CalculateUpToDatePlayerSmooth(gbgdf)
gbgdf = CalculateHistoricExpectedMinute
source('c:/research/lineup/new-model-startup.r')
source(paste0(USERPATH, 'team_funct.r'))
source(paste0(USERPATH, 'player_funct.r'))
playerDF = ffModel:::CalculateUpToDatePlayerSmooth(gbgdf)
gbgdf = CalculateHistoricExpectedMinute(gbgdf)
myTB = tibble(player = c(rep('walker', 3), rep('kbd', 4)),
gnum = c(1:3, 1:4),
start = c(T, F, T, F, T, T, T))
myTB
GetPrev2 = function(x) {
if (length(x) == 1) prev2TB = tibble(prev2 = rep(NA, 2))
if (length(x) > 1) prev2TB = tibble(prev2  tail(lag(x), 2))
return(prev2TB)
}
if (length(x) > 1) prev2TB = tibble(prev2 = tail(lag(x), 2))
GetPrev2 = function(x) {
if (length(x) == 1) prev2TB = tibble(prev2 = rep(NA, 2))
if (length(x) > 1) prev2TB = tibble(prev2 = tail(lag(x), 2))
return(prev2TB)
}
GetPrev2(c(T))
GetPrev2(c(T, F))
GetPrev2(c(T, F, F))
myTB %>%
group_by(player) %>%
arrange(gnum) %>%
do(GetPrev2, .$start)
myTB %>%
group_by(player) %>%
arrange(gnum) %>%
do(GetPrev2(.$start))
myTB %>%
group_by(player) %>%
arrange(gnum) %>%
rowwise() %>%
do(GetPrev2(.$start))
list(rep(2, 2))
GetPrev2List = function(x) {
if (length(x) == 1) prev2List = list(rep(NA, 2))
if (length(x) > 1) prev2List = list(tail(lag(x), 2))
return(prev2List)
}
myTB %>%
group_by(player) %>%
arrange(gnum) %>%
mutate(prev2 = GetPrevList(start))
myTB %>%
group_by(player) %>%
arrange(gnum) %>%
mutate(prev2 = GetPrev2List(start))
?unnest
df <- tibble(
x = 1:3,
y = c("a", "d,e,f", "g,h")
)
df %>%
transform(y = strsplit(y, ",")) %>%
unnest(y)
df %>%
transform(y = strsplit(y, ","))
dum = df %>%
transform(y = strsplit(y, ","))
dum%y
dum$y
# now have to push that list into a wide data frame
myTBWide = myTB %>%
unnest(prev2)
myTB = myTB %>%
group_by(player) %>%
arrange(gnum) %>%
mutate(prev2 = GetPrev2List(start))
# now have to push that list into a wide data frame
myTBWide = myTB %>%
unnest(prev2)
myTBWide
myTBWide = myTB %>%
group_by(player, gnum, start) %>%
mutate(pgnum = 1:2) %>%
ungroup()
myTBWide = myTB %>%
group_by(player, gnum, start) %>%
mutate(pgnum = 1:n()) %>%
ungroup()
myTBWide
# now have to push that list into a wide data frame
myTBLong = myTB %>%
unnest(prev2) %>%
group_by(player, gnum, start) %>%
mutate(pgnum = 1:n()) %>%
ungroup()
myTBLong
myTBWide = myTBLong %>%
spread(value = prev2, key = pgnum)
myTBWide
myTB = tibble(player = c(rep('walker', 3), rep('kbd', 4)),
gnum = c(1:3, 1:4),
start = c(T, F, T, F, T, T, T))
GetPrev2List = function(x) {
if (length(x) == 1) prev2List = list(rep(NA, 2))
if (length(x) > 1) prev2List = list(tail(lag(x), 2))
return(prev2List)
}
myTB = myTB %>%
group_by(player) %>%
arrange(gnum) %>%
mutate(prev2 = GetPrev2List(start))
myTB
myTB[1,]
myTB$prev2[1]
